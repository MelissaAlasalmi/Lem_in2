	S	   			  // GEN 1
   |  \    
   r2  r1			 // GEN 2
    \    | \
      - r3 - r4	     // GEN 3
	   	|		\   |
		r5 ---  end // GEN 4

index gen = 1
  s-r1    0  // BLOCK
  s-r2    1  // BLOCK
  r2-r3   2 
  r1-r3   3 // BLOCK
  r1-r4   4 // BLOCK
  r3-r5   5 // BLOCK
  r4-r3   6 // BLOCK
  r5-e    7
  e-r4    9

forbidden_index[0] = 0
forbidden_index[1] = 1
forbidden_index[2] = 3

	s-r1-r4-end
	s-r1-r3-r4-end
	s-r2-r3-r4-end
  s-r2-r3-r5-end

	* r1-r4
	//r1-r3-r4
    //r2-r3-r4
	* r2-r3-r5

"sibling" = anything tha has the same parent
  s-r1                    s
  s-r2*              r1             r2
  r2-r3*        r3        r4         r3
  r1-r3*   r5   r4  r2            r5  r4  r2
  r1-r4    e  r1 e s              e  r1 e  s
  r3-r5*   
  r4-r3*  
  r5-e    
  e-r4 

  s 
   \
    r1 -- r2
            \
              r3 -- 

s //tree
| 
r1 ----- r2
|          \
r3 - r4     r3
|     |     |
r5    e     r4 - r5
|           |     |  
e           e     e

P = r5
C = NULL
S = NULL

P = NULL
C = r1
S = NULL

backtracking = while (P != NULL && S != NULL)
                    backtrack
                    if (S != NULL)
                        move to sibling
                        scan forward


scan forward = while (C != NULL && S != NULL)
                        scan forward
                        fill in all the data for family members
               backtracks